package OrderForms;

import Classes.OrderStock;
import Classes.Orders;
import Classes.Supplier;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class ViewOrders extends javax.swing.JFrame {

    
    ArrayList<Supplier> suppliers = new ArrayList<>();
    ArrayList<Orders> originalOrders = new ArrayList<>();
    ArrayList<Orders> searchedOrders = new ArrayList<>();
    Orders currentOrder;
    boolean searchActivated = false;
    int currentSelectionOrder;
    DefaultListModel orderModel = new DefaultListModel();
    
    
    public ViewOrders() {
        initComponents();
        setupForm();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jRadioButton4 = new javax.swing.JRadioButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtSearchDateOrdered = new javax.swing.JFormattedTextField();
        txtSearchDateArrived = new javax.swing.JFormattedTextField();
        txtSearchEstimateArrival = new javax.swing.JFormattedTextField();
        txtSearchPrice = new javax.swing.JTextField();
        radSearchPriceExact = new javax.swing.JRadioButton();
        radSearchPriceHigher = new javax.swing.JRadioButton();
        radSearchPriceLower = new javax.swing.JRadioButton();
        radSearchArrivedBoth = new javax.swing.JRadioButton();
        radSearchArrivedYes = new javax.swing.JRadioButton();
        radSearchArrivedNo = new javax.swing.JRadioButton();
        radSearchCancelledBoth = new javax.swing.JRadioButton();
        radSearchCancelledYes = new javax.swing.JRadioButton();
        radSearchCancelledNo = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstOrders = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        txtNoOfItems = new javax.swing.JTextField();
        txtDateOrdered = new javax.swing.JFormattedTextField();
        txtDateArrived = new javax.swing.JFormattedTextField();
        txtEstimateArrival = new javax.swing.JFormattedTextField();
        radArrivedYes = new javax.swing.JRadioButton();
        radArrivedNo = new javax.swing.JRadioButton();
        radCancelledYes = new javax.swing.JRadioButton();
        radCancelledNo = new javax.swing.JRadioButton();
        btnNewOrder = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnSearchIncomingOrders = new javax.swing.JButton();
        btnSearchCancelled = new javax.swing.JButton();
        cboSearchSupplier = new javax.swing.JComboBox<>();
        txtSupplier = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        jRadioButton4.setText("jRadioButton1");

        jButton3.setText("Generate Order");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Orders");

        jLabel2.setText("Supplier :");

        jLabel3.setText("Total Price :");

        jLabel4.setText("Date Ordered :");

        jLabel5.setText("Arrival Date :");

        jLabel6.setText("Estimated Arrival :");

        jLabel7.setText("Arrived :");

        jLabel8.setText("Cancelled :");

        txtSearchDateOrdered.setEditable(false);
        txtSearchDateOrdered.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy/MM/dd"))));

        txtSearchDateArrived.setEditable(false);

        txtSearchEstimateArrival.setEditable(false);

        buttonGroup1.add(radSearchPriceExact);
        radSearchPriceExact.setSelected(true);
        radSearchPriceExact.setText("Exact");

        buttonGroup1.add(radSearchPriceHigher);
        radSearchPriceHigher.setText("Higher");

        buttonGroup1.add(radSearchPriceLower);
        radSearchPriceLower.setText("Lower");

        buttonGroup2.add(radSearchArrivedBoth);
        radSearchArrivedBoth.setSelected(true);
        radSearchArrivedBoth.setText("Both");

        buttonGroup2.add(radSearchArrivedYes);
        radSearchArrivedYes.setText("Yes");

        buttonGroup2.add(radSearchArrivedNo);
        radSearchArrivedNo.setText("No");

        buttonGroup3.add(radSearchCancelledBoth);
        radSearchCancelledBoth.setSelected(true);
        radSearchCancelledBoth.setText("Both");

        buttonGroup3.add(radSearchCancelledYes);
        radSearchCancelledYes.setText("Yes");

        buttonGroup3.add(radSearchCancelledNo);
        radSearchCancelledNo.setText("No");

        lstOrders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstOrders);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setText("Order Details");

        jLabel10.setText("Supplier :");

        jLabel11.setText("No of Items :");

        jLabel12.setText("Total :");

        jLabel13.setText("Arrived :");

        jLabel14.setText("Cancelled :");

        jLabel15.setText("Date Ordered :");

        jLabel16.setText("Date Arrived :");

        jLabel17.setText("Estimated Arrival :");

        txtTotal.setEditable(false);

        txtNoOfItems.setEditable(false);

        txtDateOrdered.setEditable(false);

        txtDateArrived.setEditable(false);

        buttonGroup4.add(radArrivedYes);
        radArrivedYes.setText("Yes");

        buttonGroup4.add(radArrivedNo);
        radArrivedNo.setSelected(true);
        radArrivedNo.setText("No");

        buttonGroup5.add(radCancelledYes);
        radCancelledYes.setText("Yes");

        buttonGroup5.add(radCancelledNo);
        radCancelledNo.setSelected(true);
        radCancelledNo.setText("No");

        btnNewOrder.setText("New Order");
        btnNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewOrderActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Order");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnSearchIncomingOrders.setText("Incoming Orders");
        btnSearchIncomingOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIncomingOrdersActionPerformed(evt);
            }
        });

        btnSearchCancelled.setText("Recently Cancelled Orders");
        btnSearchCancelled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCancelledActionPerformed(evt);
            }
        });

        txtSupplier.setEditable(false);

        jLabel18.setText("Quick searchs :");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEdit)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel16))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txtNoOfItems, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                                .addComponent(txtTotal, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txtDateArrived, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                                .addComponent(txtDateOrdered, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addComponent(txtSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel14))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(radArrivedYes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radArrivedNo))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(radCancelledYes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radCancelledNo))
                                            .addComponent(txtEstimateArrival, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNewOrder)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(43, 43, 43)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cboSearchSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel5))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtSearchDateOrdered, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                                    .addComponent(txtSearchEstimateArrival)
                                                    .addComponent(txtSearchDateArrived))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(radSearchArrivedBoth)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radSearchArrivedYes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radSearchArrivedNo))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtSearchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(radSearchPriceExact)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radSearchPriceHigher)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radSearchPriceLower)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnSearchIncomingOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(radSearchCancelledBoth)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radSearchCancelledYes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radSearchCancelledNo)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnSearchCancelled, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(btnSearch)))))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnClose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtSearchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radSearchPriceExact)
                    .addComponent(radSearchPriceHigher)
                    .addComponent(radSearchPriceLower)
                    .addComponent(cboSearchSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSearchDateOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(radSearchArrivedBoth)
                    .addComponent(radSearchArrivedYes)
                    .addComponent(radSearchArrivedNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSearchDateArrived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(radSearchCancelledBoth)
                    .addComponent(radSearchCancelledYes)
                    .addComponent(radSearchCancelledNo)
                    .addComponent(btnSearch))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSearchEstimateArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchIncomingOrders)
                    .addComponent(btnSearchCancelled)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtNoOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(txtDateOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(txtDateArrived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(txtEstimateArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(radArrivedYes)
                            .addComponent(radArrivedNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(radCancelledYes)
                            .addComponent(radCancelledNo)))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.addEditOrder != null) {
            Utilities.IntergratedProjectStaffApplication.addEditOrder.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.addEditOrder = new AddEditOrder(currentOrder);
        Utilities.IntergratedProjectStaffApplication.addEditOrder.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewOrderActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.addEditOrder != null) {
            Utilities.IntergratedProjectStaffApplication.addEditOrder.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.addEditOrder = new AddEditOrder();
        Utilities.IntergratedProjectStaffApplication.addEditOrder.setVisible(true);
    }//GEN-LAST:event_btnNewOrderActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        boolean validation;
        
        validation = Utilities.Utilities.nullCheck(txtEstimateArrival, "Estimated Arrival", "Estimated Arrival") &&
                        Utilities.Utilities.dateCheck(txtEstimateArrival) &&
                Utilities.Utilities.dateAfter(LocalDate.parse(txtEstimateArrival.getText()) , LocalDate.parse(txtDateOrdered.getText()), "Estimate Arrial Date", "Date Ordered");
        
        if (validation) {
            
            setCurrentOrder();            
            Utilities.IntergratedProjectStaffApplication.JSPConnector.updateOrder(currentOrder);
            String supplierName = "";
            for (Supplier supplier : suppliers) {
                if (currentOrder.getSupplierID() == supplier.getSupplierID())
                    supplierName = supplier.getSupplierName();
            }
            supplierName += " : " + currentOrder.getDateOrdered();
            orderModel.set(currentSelectionOrder, supplierName);
            Utilities.Utilities.infoBox("Order Updated" ,"Order Updated");
            
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnSearchIncomingOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIncomingOrdersActionPerformed
        
        searchActivated = true;
        orderModel.clear();        
        searchedOrders.clear();
        for (Orders order : originalOrders) {
            if (order.getArrived() == 0  && order.getDateEstimateArrival().equals(LocalDate.now())) {
                searchedOrders.add(order);
                String supplierName = "";
                for (Supplier supplier : suppliers) {
                    if (supplier.getSupplierID() == order.getSupplierID()) {
                        supplierName = supplier.getSupplierName();
                        break;
                    }
                }
                searchActivated = true;
                orderModel.addElement(supplierName + " : " + order.getDateOrdered());
            }
        }
        if (searchedOrders.isEmpty()) {
            for (Orders order : originalOrders) {
                searchedOrders.add(order);
                String supplierName = "";
                for (Supplier supplier : suppliers) {
                    if (supplier.getSupplierID() == order.getSupplierID()) {
                        supplierName = supplier.getSupplierName();
                        break;
                    }
                }
                searchActivated = true;
                orderModel.addElement(supplierName + " : " + order.getDateOrdered());
            }
            Utilities.Utilities.infoBox("No orders coming in today", "No results");
        }
        currentSelectionOrder = 0;
    }//GEN-LAST:event_btnSearchIncomingOrdersActionPerformed

    private void btnSearchCancelledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCancelledActionPerformed
        searchActivated = true;
        orderModel.clear();        
        searchedOrders.clear();
        for (Orders order : originalOrders) {
            if (order.getCancelled() == 1 && LocalDate.now().minusWeeks(1).isBefore(order.getDateOrdered())) {
                searchedOrders.add(order);
                String supplierName = "";
                for (Supplier supplier : suppliers) {
                    if (supplier.getSupplierID() == order.getSupplierID()) {
                        supplierName = supplier.getSupplierName();
                        break;
                    }
                }
                searchActivated = true;
                orderModel.addElement(supplierName + " : " + order.getDateOrdered());
            }
        }
        if (searchedOrders.isEmpty()) {
            for (Orders order : originalOrders) {
                searchedOrders.add(order);
                String supplierName = "";
                for (Supplier supplier : suppliers) {
                    if (supplier.getSupplierID() == order.getSupplierID()) {
                        supplierName = supplier.getSupplierName();
                        break;
                    }
                }
                searchActivated = true;
                orderModel.addElement(supplierName + " : " + order.getDateOrdered());
            }
            Utilities.Utilities.infoBox("No cancelled orders", "No results");
        }
        currentSelectionOrder = 0;
    }//GEN-LAST:event_btnSearchCancelledActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        searchActivated = true;
        orderModel.clear();        
        searchedOrders.clear();
        
        int supplierID = -1;
        int arrived = 2;
        int cancelled = 2;
        int priceType = 0;
        LocalDate dateOrdered = null;
        LocalDate dateArrival = null;
        LocalDate dateEstimate = null;
        double price = -1.0;
        
        //set all ints for rad and combos and set dates
        if (cboSearchSupplier.getSelectedIndex() != 0)
            supplierID = suppliers.get(cboSearchSupplier.getSelectedIndex()-1).getSupplierID();        
        if (radSearchArrivedYes.isSelected())
            arrived = 1;
        else if (radSearchArrivedNo.isSelected())
            arrived = 0;        
        if (radSearchCancelledYes.isSelected())
            cancelled = 1;
        else if (radSearchCancelledNo.isSelected())
            cancelled = 0;        
        if (radSearchPriceHigher.isSelected())
            priceType = 1;
        else if (radSearchPriceLower.isSelected())
            priceType = 2;        
        if (!txtSearchDateOrdered.getText().isEmpty())
            dateOrdered = LocalDate.parse(txtSearchDateOrdered.getText());        
        if (!txtSearchDateArrived.getText().isEmpty())
            dateArrival = LocalDate.parse(txtSearchDateArrived.getText());        
        if (!txtSearchEstimateArrival.getText().isEmpty())
            dateEstimate = LocalDate.parse(txtSearchEstimateArrival.getText());
        if (!txtSearchPrice.getText().isEmpty())
            price = Double.parseDouble(txtSearchPrice.getText());
        
        for (Orders order : originalOrders) {
            
            if ((supplierID == -1 || order.getSupplierID() == supplierID) && //search through every possibilty
                    (dateOrdered == null || dateOrdered.equals(order.getDateOrdered())) &&
                    (dateArrival == null || dateArrival.equals(order.getDateArrival())) &&
                    (dateEstimate == null || dateEstimate.equals(order.getDateEstimateArrival())) &&
                    (price == -1.0 || (price == order.getTotal() && priceType == 0) ||
                    (price <= order.getTotal() && priceType == 1) || (price >= order.getTotal() && priceType == 2)) &&
                    (arrived == 2 || arrived == order.getArrived()) &&
                    (cancelled == 2 || cancelled == order.getCancelled()) ) {
                
                searchedOrders.add(order);
                String supplierName = "";
                for (Supplier supplier : suppliers) {
                    if (supplier.getSupplierID() == order.getSupplierID()) {
                        supplierName = supplier.getSupplierName();
                        break;
                    }
                }
                searchActivated = true;
                orderModel.addElement(supplierName + " : " + order.getDateOrdered());
            }
        }
        if (searchedOrders.isEmpty()) {
            for (Orders order : originalOrders) {
                searchedOrders.add(order);
                String supplierName = "";
                for (Supplier supplier : suppliers) {
                    if (supplier.getSupplierID() == order.getSupplierID()) {
                        supplierName = supplier.getSupplierName();
                        break;
                    }
                }
                searchActivated = true;
                orderModel.addElement(supplierName + " : " + order.getDateOrdered());
            }
            Utilities.Utilities.infoBox("No results", "No results");
        }
        currentSelectionOrder = 0;
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewOrders().setVisible(true);
            }
        });
    }
    
    public void setupForm() {
        
        suppliers = Utilities.IntergratedProjectStaffApplication.JSPConnector.getAllSupplier();
        cboSearchSupplier.addItem("None");
        for (Supplier supplier : suppliers)
            cboSearchSupplier.addItem(supplier.getSupplierName());
        
        lstOrders.setModel(orderModel);
        originalOrders = Utilities.IntergratedProjectStaffApplication.JSPConnector.getAllOrders();
        ArrayList<OrderStock> stockList = Utilities.IntergratedProjectStaffApplication.JSPConnector.getAllOrderStock();
        for (OrderStock stock : stockList) {
            for (Orders order : originalOrders) {
                if (stock.getOrderID() == order.getOrderID()) {
                    order.getOrderStocks().add(stock);
                    break;
                }
            }
        }
        
        for (Orders order : originalOrders) {
            searchedOrders.add(order);
            String supplierName = "";
            for (Supplier supplier : suppliers) {
                if (supplier.getSupplierID() == order.getSupplierID()) {                    
                    supplierName = supplier.getSupplierName();
                    break;
                }
            }        
            orderModel.addElement(supplierName + " : " + order.getDateOrdered());
        }
        
        setEventListeners();
        if (!orderModel.isEmpty())
            lstOrders.setSelectedIndex(0);
    }
    
    public void setEventListeners() {
        lstOrders.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!searchActivated) //this check only allows the action to take place when manually changed,
                    setCurrentOrderBoxs(); // not when the list repopulates calling the listener
                else
                    searchActivated = false;
                currentSelectionOrder = lstOrders.getSelectedIndex();
            }
        });
    }
    
    public void setCurrentOrderBoxs() {
        currentOrder = originalOrders.get(currentSelectionOrder);
        
        for (Supplier supplier : suppliers) { //find supplier
            if (supplier.getSupplierID() == currentOrder.getSupplierID()) {
                txtSupplier.setText(supplier.getSupplierName());
                break;
            }
        }
        
        txtTotal.setText(String.valueOf(currentOrder.getTotal()));
        txtNoOfItems.setText(String.valueOf(currentOrder.getNoOfItems()));
        txtDateOrdered.setText(String.valueOf(currentOrder.getDateOrdered()));
        txtDateArrived.setText(String.valueOf(currentOrder.getDateArrival()));
        txtEstimateArrival.setText(String.valueOf(currentOrder.getDateEstimateArrival()));
        
        if (currentOrder.getArrived() == 1)
            radArrivedYes.setSelected(true);
        else
            radArrivedNo.setSelected(true);
        if (currentOrder.getCancelled() == 1)
            radCancelledYes.setSelected(true);
        else
            radCancelledNo.setSelected(true);
    }
    
    public void setCurrentOrder() {
        currentOrder.setDateEstimateArrival(LocalDate.parse(txtEstimateArrival.getText()));
        
        if (radArrivedYes.isSelected() && currentOrder.getArrived() == 0) {
            Utilities.IntergratedProjectStaffApplication.JSPConnector.orderSetArrived1(currentOrder.getOrderID());
            currentOrder.setArrived(1);
            currentOrder.setDateArrival(LocalDate.now());
            txtDateArrived.setText(String.valueOf(LocalDate.now()));
        }
        else if (radArrivedNo.isSelected() && currentOrder.getArrived() == 1) {
            Utilities.IntergratedProjectStaffApplication.JSPConnector.orderSetArrived0(currentOrder.getOrderID());
            currentOrder.setArrived(0);
            currentOrder.setDateArrival(null);
            txtDateArrived.setText("null");
        }

        if (radCancelledYes.isSelected())
            currentOrder.setCancelled(1);
        else
            currentOrder.setCancelled(0);
    }
    
    public void updateCurrentObject (Double total, int noOfItems) { //updates values sent from other page       
        currentOrder.setTotal(total);                               //as they should not be manually updated
        currentOrder.setNoOfItems(noOfItems);                       //only automatically
        txtTotal.setText(String.valueOf(currentOrder.getTotal()));
        txtNoOfItems.setText(String.valueOf(currentOrder.getNoOfItems()));
        Utilities.IntergratedProjectStaffApplication.JSPConnector.updateOrder(currentOrder);        
    }
    
    public void newOrder (Orders newOrder) {
        originalOrders.add(newOrder);
        searchedOrders.add(newOrder);
        String supplierName = "";
        for (Supplier supplier : suppliers) {
            if (supplier.getSupplierID() == newOrder.getSupplierID())
                supplierName = supplier.getSupplierName();
        }
        orderModel.addElement(supplierName + " : " + newOrder.getDateOrdered());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNewOrder;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchCancelled;
    private javax.swing.JButton btnSearchIncomingOrders;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox<String> cboSearchSupplier;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<String> lstOrders;
    private javax.swing.JRadioButton radArrivedNo;
    private javax.swing.JRadioButton radArrivedYes;
    private javax.swing.JRadioButton radCancelledNo;
    private javax.swing.JRadioButton radCancelledYes;
    private javax.swing.JRadioButton radSearchArrivedBoth;
    private javax.swing.JRadioButton radSearchArrivedNo;
    private javax.swing.JRadioButton radSearchArrivedYes;
    private javax.swing.JRadioButton radSearchCancelledBoth;
    private javax.swing.JRadioButton radSearchCancelledNo;
    private javax.swing.JRadioButton radSearchCancelledYes;
    private javax.swing.JRadioButton radSearchPriceExact;
    private javax.swing.JRadioButton radSearchPriceHigher;
    private javax.swing.JRadioButton radSearchPriceLower;
    private javax.swing.JFormattedTextField txtDateArrived;
    private javax.swing.JFormattedTextField txtDateOrdered;
    private javax.swing.JFormattedTextField txtEstimateArrival;
    private javax.swing.JTextField txtNoOfItems;
    private javax.swing.JFormattedTextField txtSearchDateArrived;
    private javax.swing.JFormattedTextField txtSearchDateOrdered;
    private javax.swing.JFormattedTextField txtSearchEstimateArrival;
    private javax.swing.JTextField txtSearchPrice;
    private javax.swing.JTextField txtSupplier;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
