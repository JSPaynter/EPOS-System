package UtilityForms;

import Classes.Bill;
import Classes.BillOrder;
import Classes.MadeIngredient;
import Classes.Meal;
import Classes.MealIngredient;
import Classes.Staff;
import static Utilities.IntergratedProjectStaffApplication.JSPConnector;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

public class MainInterface extends javax.swing.JFrame {    
    
    Staff staff;
    ArrayList<Meal> allMeals = new ArrayList<>();
    ArrayList<Meal> nonAlcoholic = new ArrayList<>();
    ArrayList<Meal> alcoholic = new ArrayList<>();
    ArrayList<Meal> starter = new ArrayList<>();
    ArrayList<Meal> main = new ArrayList<>();
    ArrayList<Meal> dessert = new ArrayList<>();
    ArrayList<Meal> side = new ArrayList<>();
    ArrayList<Meal> snack = new ArrayList<>();
    ArrayList<JButton> buttons = new ArrayList<>();
    DefaultListModel orderModel = new DefaultListModel();
    ArrayList<BillOrder> deleteItems = new ArrayList<>();
    ArrayList<BillOrder> newItems = new ArrayList<>();
    ArrayList<BillOrder> markComplete = new ArrayList<>();
    Bill currentBill;
    int course = 0;
    int[] currentCourses = { 0, 0, 0, 0}; //number of drinks, starters, mains, desserts in current bill
    JPanel panel;
    
    
    public MainInterface() {
        Utilities.IntergratedProjectStaffApplication.mainInterface = this;
        initComponents();
        lblTotal.setText("");
        lblTotalToPay.setText("");
        lblTableNo.setText("");
        setupForm();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUsername = new javax.swing.JLabel();
        pnlBackGround = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblTableNo = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnAlcoholic = new javax.swing.JButton();
        btnLogin = new javax.swing.JButton();
        btnManagerOptions = new javax.swing.JButton();
        btnStarter = new javax.swing.JButton();
        btnNonAlcoholic = new javax.swing.JButton();
        btnMain = new javax.swing.JButton();
        btnDessert = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstOrder = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnBillSplit = new javax.swing.JButton();
        btnCourse1 = new javax.swing.JToggleButton();
        btnCash = new javax.swing.JButton();
        btnCourse2 = new javax.swing.JToggleButton();
        btnCard = new javax.swing.JButton();
        btnCourse3 = new javax.swing.JToggleButton();
        btnViewOrders = new javax.swing.JButton();
        btnSide = new javax.swing.JButton();
        btnSnack = new javax.swing.JButton();
        btnRefund = new javax.swing.JButton();
        btnConfirmBill = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblTotalToPay = new javax.swing.JLabel();
        pnlMeals = new javax.swing.JPanel();
        btnDone = new javax.swing.JButton();
        lblUser = new javax.swing.JLabel();
        btnRemoveItem = new javax.swing.JButton();
        btnOpenTables = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        pnlBackGround.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 0));
        jLabel2.setText("Total :");

        lblTableNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTableNo.setForeground(new java.awt.Color(255, 204, 0));
        lblTableNo.setText("TableNo");

        lblTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(255, 204, 0));
        lblTotal.setText("Total");

        btnAlcoholic.setBackground(java.awt.Color.orange);
        btnAlcoholic.setText("Alchoholic Drinks");
        btnAlcoholic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlcoholicActionPerformed(evt);
            }
        });

        btnLogin.setBackground(java.awt.Color.orange);
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnManagerOptions.setBackground(java.awt.Color.orange);
        btnManagerOptions.setText("Manager Options");
        btnManagerOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManagerOptionsActionPerformed(evt);
            }
        });

        btnStarter.setBackground(java.awt.Color.orange);
        btnStarter.setText("Starter");
        btnStarter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStarterActionPerformed(evt);
            }
        });

        btnNonAlcoholic.setBackground(java.awt.Color.orange);
        btnNonAlcoholic.setText("Non Alchoholic Drinks");
        btnNonAlcoholic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNonAlcoholicActionPerformed(evt);
            }
        });

        btnMain.setBackground(java.awt.Color.orange);
        btnMain.setText("Main");
        btnMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainActionPerformed(evt);
            }
        });

        btnDessert.setBackground(java.awt.Color.orange);
        btnDessert.setText("Dessert");
        btnDessert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDessertActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 204, 0));
        jLabel3.setText("Course :");

        lstOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstOrder);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 0));
        jLabel1.setText("Table No :");

        btnBillSplit.setBackground(java.awt.Color.orange);
        btnBillSplit.setText("Split Bill");
        btnBillSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillSplitActionPerformed(evt);
            }
        });

        btnCourse1.setBackground(java.awt.Color.orange);
        btnCourse1.setText("Starter");
        btnCourse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourse1ActionPerformed(evt);
            }
        });

        btnCash.setBackground(java.awt.Color.orange);
        btnCash.setText("Pay Cash");
        btnCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCashActionPerformed(evt);
            }
        });

        btnCourse2.setBackground(java.awt.Color.orange);
        btnCourse2.setText("Main");
        btnCourse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourse2ActionPerformed(evt);
            }
        });

        btnCard.setBackground(java.awt.Color.orange);
        btnCard.setText("Pay Card");
        btnCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCardActionPerformed(evt);
            }
        });

        btnCourse3.setBackground(java.awt.Color.orange);
        btnCourse3.setText("Dessert");
        btnCourse3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourse3ActionPerformed(evt);
            }
        });

        btnViewOrders.setBackground(java.awt.Color.orange);
        btnViewOrders.setText("View Table");
        btnViewOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrdersActionPerformed(evt);
            }
        });

        btnSide.setBackground(java.awt.Color.orange);
        btnSide.setText("Side");
        btnSide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSideActionPerformed(evt);
            }
        });

        btnSnack.setBackground(java.awt.Color.orange);
        btnSnack.setText("Snack");
        btnSnack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSnackActionPerformed(evt);
            }
        });

        btnRefund.setBackground(java.awt.Color.orange);
        btnRefund.setText("Refund");
        btnRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefundActionPerformed(evt);
            }
        });

        btnConfirmBill.setBackground(java.awt.Color.orange);
        btnConfirmBill.setText("Save Table");
        btnConfirmBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmBillActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 204, 0));
        jLabel5.setText("User :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 204, 0));
        jLabel7.setText("Total To Pay :");

        lblTotalToPay.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTotalToPay.setForeground(new java.awt.Color(255, 204, 0));
        lblTotalToPay.setText("Total");

        pnlMeals.setPreferredSize(new java.awt.Dimension(462, 527));
        pnlMeals.setRequestFocusEnabled(false);

        javax.swing.GroupLayout pnlMealsLayout = new javax.swing.GroupLayout(pnlMeals);
        pnlMeals.setLayout(pnlMealsLayout);
        pnlMealsLayout.setHorizontalGroup(
            pnlMealsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );
        pnlMealsLayout.setVerticalGroup(
            pnlMealsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnDone.setBackground(java.awt.Color.orange);
        btnDone.setText("Mark Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        lblUser.setForeground(new java.awt.Color(255, 204, 0));
        lblUser.setText("User");

        btnRemoveItem.setBackground(java.awt.Color.orange);
        btnRemoveItem.setText("Remove Item");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });

        btnOpenTables.setBackground(java.awt.Color.orange);
        btnOpenTables.setText("View Open Tables");
        btnOpenTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenTablesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBackGroundLayout = new javax.swing.GroupLayout(pnlBackGround);
        pnlBackGround.setLayout(pnlBackGroundLayout);
        pnlBackGroundLayout.setHorizontalGroup(
            pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUser))
                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDessert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStarter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSnack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAlcoholic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNonAlcoholic, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlMeals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackGroundLayout.createSequentialGroup()
                        .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnManagerOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCourse1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCourse2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCourse3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackGroundLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTableNo))
                            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTotal)
                                    .addComponent(lblTotalToPay)))
                            .addComponent(btnCard, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBillSplit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(btnDone, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(btnRemoveItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnConfirmBill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnViewOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnCash, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackGroundLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRefund, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(btnOpenTables, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlBackGroundLayout.setVerticalGroup(
            pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblTableNo))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblTotalToPay))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnConfirmBill, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnViewOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBillSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefund, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCash, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCard, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOpenTables, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblUser))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnManagerOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(btnCourse1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCourse2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCourse3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                                .addComponent(btnNonAlcoholic, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAlcoholic, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnStarter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnMain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDessert, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSide, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSnack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlMeals, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUsername))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlBackGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblUsername))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnManagerOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManagerOptionsActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.managerOptions != null) {
            Utilities.IntergratedProjectStaffApplication.managerOptions.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.managerOptions = new ManagerOptions(staff.getFirstName() + " " + staff.getSurname());
        Utilities.IntergratedProjectStaffApplication.managerOptions.setVisible(true);
    }//GEN-LAST:event_btnManagerOptionsActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        
        if (staff != null) {
            staff = null;
            btnLogin.setText("Login");
            lblUser.setText("");
            btnManagerOptions.setEnabled(false);
        } else {
            if (Utilities.IntergratedProjectStaffApplication.numPad != null) {
                Utilities.IntergratedProjectStaffApplication.numPad.dispose();
            }
            Utilities.IntergratedProjectStaffApplication.numPad = new NumberPad(1);
            Utilities.IntergratedProjectStaffApplication.numPad.setVisible(true);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnBillSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillSplitActionPerformed
        if (currentBill == null)
            Utilities.Utilities.infoBox("Please select a active order", "No order selected");
        else if (!deleteItems.isEmpty() && !newItems.isEmpty())
            Utilities.Utilities.infoBox("Please confirm changes before spliting bill", "Confirm order");
        else {
            if (Utilities.IntergratedProjectStaffApplication.billSplit != null) {
                    Utilities.IntergratedProjectStaffApplication.billSplit.dispose();
                }
                Utilities.IntergratedProjectStaffApplication.billSplit = new BillSplit();
                Utilities.IntergratedProjectStaffApplication.billSplit.setVisible(true);
        }
    }//GEN-LAST:event_btnBillSplitActionPerformed

    private void btnRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefundActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.numPad != null) {
            Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.numPad = new NumberPad(5);
        Utilities.IntergratedProjectStaffApplication.numPad.setVisible(true);
    }//GEN-LAST:event_btnRefundActionPerformed

    private void btnViewOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrdersActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.numPad != null) {
            Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.numPad = new NumberPad(2);
        Utilities.IntergratedProjectStaffApplication.numPad.setVisible(true);
    }//GEN-LAST:event_btnViewOrdersActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        
        if (currentBill == null) {
            Utilities.Utilities.infoBox("Please select a order", "Order");
        } else {
            Object[] options = {"Drinks", "Starters", "Mains", "Desserts"};
            int result = JOptionPane.showOptionDialog( null, "Mark which items as done", "Mark Done",
            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[3]);
            markCourse(result);
        }
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnConfirmBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmBillActionPerformed
        if (currentBill != null) {
            
            for (BillOrder order : deleteItems) {
                Utilities.IntergratedProjectStaffApplication.JSPConnector.deleteBillOrder(order);
                currentBill.setNoOfItems(currentBill.getNoOfItems() - 1);
            }
            for (BillOrder order : newItems) {
                Utilities.IntergratedProjectStaffApplication.JSPConnector.addBillOrder(order);
                currentBill.setNoOfItems(currentBill.getNoOfItems() + 1);
            }
            for (BillOrder order : markComplete) {
                Utilities.IntergratedProjectStaffApplication.JSPConnector.updateBillOrderComplete(order);
            }
            
            Utilities.IntergratedProjectStaffApplication.JSPConnector.updateBill(currentBill);
            
            //resets
            deleteItems.clear();
            newItems.clear();
            markComplete.clear();
            
            currentBill = null;
            lblTotal.setText("");
            lblTotalToPay.setText("");
            orderModel.clear();
            lblTableNo.setText("Order Updated");
            currentCourses[0] = 0;
            currentCourses[1] = 0;
            currentCourses[2] = 0;
            currentCourses[3] = 0;
        }
    }//GEN-LAST:event_btnConfirmBillActionPerformed

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        
        if (currentBill == null)
            Utilities.Utilities.infoBox("No order selected", "No order");
        else if (lstOrder.getSelectedIndex() == -1 || //check item is selected and not a line divider
                lstOrder.getSelectedIndex() == currentCourses[0] ||
                lstOrder.getSelectedIndex() == currentCourses[0] + currentCourses[1] +1 ||
                lstOrder.getSelectedIndex() == currentCourses[0] + currentCourses[1] + currentCourses[2] + 2 ||
                lstOrder.getSelectedIndex() == currentCourses[0] + currentCourses[1] + currentCourses[2] + currentCourses [3] + 3) 
            Utilities.Utilities.infoBox("No item selected", "No item selected");
        else {
            int index = lstOrder.getSelectedIndex();
            orderModel.remove(index);
            int mealID;
            double price = 0.0;
            //reduce index to find appropriate figure in arraylist
            if (index >= currentCourses[0] + currentCourses[1] + currentCourses[2] + currentCourses[3] + 4) { //new items
                index -= (currentCourses[0] + currentCourses[1] + currentCourses[2] + currentCourses[3] + 4); //get index after old items
                newItems.remove(index);
            }
            else if (index >= currentCourses[0] + currentCourses[1] + currentCourses[2] + 3) { //item is dessert
                index -= 3;
                currentCourses[3] -= 1;
                deleteItems.add(currentBill.getBillOrders().get(index));
            }
            else if (index >= currentCourses[0] + currentCourses[1] + 2) {//item is main
                index -= 2;
                currentCourses[2] -= 1;
                deleteItems.add(currentBill.getBillOrders().get(index));
            }
            else if (index >= currentCourses[0] + 1) {//item is starter
                index -= 1;
                currentCourses[1] -= 1;
                deleteItems.add(currentBill.getBillOrders().get(index));
            } else { //item is a drink
                currentCourses[0] -= 1;
                deleteItems.add(currentBill.getBillOrders().get(index));
            }
            mealID = currentBill.getBillOrders().get(index).getMealID();
            for (Meal meal : allMeals) {
                if (meal.getMealID() == mealID) {
                    price = meal.getPrice();
                }
            }
            
            currentBill.setTotal(currentBill.getTotal() - price);
            currentBill.getBillOrders().remove(index);
            setLabels();
        }
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    private void btnCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCashActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.numPad != null) {
            Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.numPad = new NumberPad(3);
        Utilities.IntergratedProjectStaffApplication.numPad.setVisible(true);
    }//GEN-LAST:event_btnCashActionPerformed

    private void btnCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCardActionPerformed
        if (Utilities.IntergratedProjectStaffApplication.numPad != null) {
            Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        }
        Utilities.IntergratedProjectStaffApplication.numPad = new NumberPad(4);
        Utilities.IntergratedProjectStaffApplication.numPad.setVisible(true);
    }//GEN-LAST:event_btnCardActionPerformed

    private void btnAlcoholicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlcoholicActionPerformed
        generateOrderButtons(nonAlcoholic);
        course = 0;
        btnCourse1.setSelected(false);
        btnCourse2.setSelected(false);
        btnCourse3.setSelected(false);
        courseButtonSettings(false);
    }//GEN-LAST:event_btnAlcoholicActionPerformed

    private void btnNonAlcoholicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNonAlcoholicActionPerformed
        generateOrderButtons(alcoholic);
        course = 0;
        btnCourse1.setSelected(false);
        btnCourse2.setSelected(false);
        btnCourse3.setSelected(false);
        courseButtonSettings(false);
    }//GEN-LAST:event_btnNonAlcoholicActionPerformed

    private void btnStarterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStarterActionPerformed
        generateOrderButtons(starter);
        courseButtonSettings(true);
        btnCourse1.setSelected(true);
        btnCourse2.setSelected(false);
        btnCourse3.setSelected(false);
        course = 1;
    }//GEN-LAST:event_btnStarterActionPerformed

    private void btnMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainActionPerformed
        generateOrderButtons(main);
        courseButtonSettings(true);
        btnCourse1.setSelected(false);
        btnCourse2.setSelected(true);
        btnCourse3.setSelected(false);
        course = 2;
    }//GEN-LAST:event_btnMainActionPerformed

    private void btnDessertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDessertActionPerformed
        generateOrderButtons(dessert);
        courseButtonSettings(true);
        btnCourse1.setSelected(false);
        btnCourse2.setSelected(false);
        btnCourse3.setSelected(true);
        course = 3;
    }//GEN-LAST:event_btnDessertActionPerformed

    private void btnSideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSideActionPerformed
        generateOrderButtons(side);
        courseButtonSettings(true);
        btnCourse1.setSelected(false);
        btnCourse2.setSelected(true);
        btnCourse3.setSelected(false);
        if (course == 0)
            course = 2;
    }//GEN-LAST:event_btnSideActionPerformed

    private void btnSnackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSnackActionPerformed
        generateOrderButtons(snack);
        courseButtonSettings(true);
        btnCourse1.setSelected(false);
        btnCourse2.setSelected(true);
        btnCourse3.setSelected(false);
        if (course == 0)
            course = 2;
    }//GEN-LAST:event_btnSnackActionPerformed

    private void btnCourse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourse1ActionPerformed
        if (btnCourse1.isSelected()) {        
            btnCourse2.setSelected(false);
            btnCourse3.setSelected(false);
            course = 1;
        } else
            btnCourse1.setSelected(true);
    }//GEN-LAST:event_btnCourse1ActionPerformed

    private void btnCourse2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourse2ActionPerformed
        if (btnCourse2.isSelected()) {        
            btnCourse1.setSelected(false);
            btnCourse3.setSelected(false);
            course = 2;
        } else
            btnCourse2.setSelected(true);
    }//GEN-LAST:event_btnCourse2ActionPerformed

    private void btnCourse3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourse3ActionPerformed
        if (btnCourse3.isSelected()) {        
            btnCourse1.setSelected(false);
            btnCourse2.setSelected(false);
            course = 3;
        } else
            btnCourse3.setSelected(true);
    }//GEN-LAST:event_btnCourse3ActionPerformed

    private void btnOpenTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenTablesActionPerformed
        ArrayList<Bill> openTables = JSPConnector.getAllTableBill();
        if (openTables.isEmpty())
            Utilities.Utilities.infoBox("No open tables", "Open Tables");
        else {
            currentBill = null;
            lblTotal.setText("");
            lblTotalToPay.setText("");
            lblTableNo.setText("");
            
            ArrayList<Object> possibilities = new ArrayList<>();
            for (Bill bill : openTables)
                possibilities.add(String.format("Bill ID : " + bill.getBillID() + ", Table No : " + bill.getTableNo() + ", £%.2f , " + bill.getNoOfItems() + ", " + bill.getBillDate(), bill.getTotal()));
            
            String choice = (String) JOptionPane.showInputDialog(null, "Select a table (Bill ID, Table No, Bill Total, No of items, Date)", "Open Tables", JOptionPane.PLAIN_MESSAGE, null, possibilities.toArray(), possibilities.get(0));
            
            String[] results = choice.split(", ");
            String[] finalResults = results[0].split("Bill ID : ");
            int id = Integer.parseInt(finalResults[1]);
            
            for (Bill bill : openTables) {
                if (id == bill.getBillID()) {
                    currentBill = bill;
                    
                    for (int i = 0; i < 4; i++)
                        currentCourses[i] = 0;
            
                    ArrayList<BillOrder> firstList = JSPConnector.getTableBillOrder(id);
                    ArrayList<BillOrder> sortedList = new ArrayList<>();
                    //sort list
                    for (int i = 0; i < 4; i++) {
                        for (BillOrder order : firstList) {
                            if (order.getCourse() == i) {
                                sortedList.add(order);
                                currentCourses[i] += 1;
                            }
                        }
                    }
                    currentBill.setBillOrders(sortedList);

                    refreshOrderList();

                    Double total = currentBill.getTotal();
                    Double toPay = total - (currentBill.getPaidCard() + currentBill.getPaidCash());
                    setLabels();
                    lblTableNo.setText(String.valueOf(currentBill.getTableNo()));
                    
                }
            }
            
        }
    }//GEN-LAST:event_btnOpenTablesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }
    
    public void setupForm() {
        refreshMenu();
        lstOrder.setModel(orderModel);
        setupPanel();
        generateOrderButtons(nonAlcoholic);
        courseButtonSettings(false);
        btnManagerOptions.setEnabled(false);
    }
    
    public void refreshMenu() {
        allMeals = JSPConnector.getAllMeal();
        for (Meal meal : allMeals) {
            if (meal.getMenu() == 1) {
                switch (meal.getMealTypeID()) {
                    case 1:
                        nonAlcoholic.add(meal);
                        break;
                    case 2:
                        alcoholic.add(meal);
                        break;
                    case 3:
                        starter.add(meal);
                        break;
                    case 4:
                        main.add(meal);
                        break;
                    case 5:
                        dessert.add(meal);
                        break;
                    case 6:
                        side.add(meal);
                        break;
                    case 7:
                        snack.add(meal);
                        break;
                }
            }
        }
    }
    
    public void login(Staff staff) {
        Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        this.staff = staff;
        btnLogin.setText("Logout");
        lblUser.setText(staff.getFirstName() + " " + staff.getSurname());
        if (staff.getManager() == 1)
            btnManagerOptions.setEnabled(true);
        else
            btnManagerOptions.setEnabled(false);
    }
    
    public void setTableNo(Bill bill, int tableNo) {
        Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        
        boolean process = false;
        
        if (bill == null) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "No order current on table " + tableNo + ". Start new Order?" , "New Table", JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
            currentBill = new Bill(tableNo);
            currentBill.setBillID(Utilities.IntergratedProjectStaffApplication.JSPConnector.addBill(currentBill));
            process = true;
        }
        } else {
            currentBill = bill;
            process = true;
        }
        if (process) {
            for (int i = 0; i < 4; i++)
                currentCourses[i] = 0;
            
            ArrayList<BillOrder> sortedList = new ArrayList<>();
            //sort list
            for (int i = 0; i < 4; i++) {
                for (BillOrder order : currentBill.getBillOrders()) {
                    if (order.getCourse() == i) {
                        sortedList.add(order);
                        currentCourses[i] += 1;
                    }
                }
            }
            currentBill.setBillOrders(sortedList);
            
            refreshOrderList();
            
            Double total = currentBill.getTotal();
            Double toPay = total - (currentBill.getPaidCard() + currentBill.getPaidCash());
            setLabels();
            lblTableNo.setText(String.valueOf(currentBill.getTableNo()));
        }
    }
    
    public void refreshOrderList() {
        orderModel.clear();
        
        int i = 1; //counter
        if (!currentBill.getBillOrders().isEmpty()) {
            for (BillOrder billOrder : currentBill.getBillOrders()) {
                String orderLine = "";
                for (Meal meal : allMeals) {                    
                    if (meal.getMealID() == billOrder.getMealID()) {
                        orderLine = meal.getName() + " " + meal.getPrice();
                        break;
                    }
                }
                if (billOrder.getComplete() == 1)                
                    orderLine += " - Done";
                orderModel.addElement(orderLine);
                if (i == currentCourses[0] ||
                        i == currentCourses[1] + currentCourses[0] ||
                        i == currentCourses[2] + currentCourses[1] + currentCourses[0] ||
                        i == currentCourses[3] + currentCourses[2] + currentCourses[1] + currentCourses[0])
                        orderModel.addElement("------------------- End of Course -------------------");
                i += 1;
            }
        }
    }
    
    public void setLabels() {
        Double total = currentBill.getTotal();
        Double toPay = total - (currentBill.getPaidCard() + currentBill.getPaidCash());        
        lblTotal.setText(String.format("%.2f", total));
        lblTotalToPay.setText(String.format("%.2f", toPay));
    }
    
    public void payBill(double amount, int cashCard) {
        //set values
        if (cashCard == 0)
            currentBill.setPaidCash(currentBill.getPaidCash() + amount);
        else if (cashCard == 1)
            currentBill.setPaidCard(currentBill.getPaidCard() + amount);
        
        Utilities.IntergratedProjectStaffApplication.JSPConnector.updateBill(currentBill); //update database
        
        if (currentBill.getPaidCard()+currentBill.getPaidCash() == currentBill.getTotal()) { //check if order should still be active
            Utilities.IntergratedProjectStaffApplication.JSPConnector.updateBillActive(currentBill);
            
            for (BillOrder order : currentBill.getBillOrders()) {
                for (Meal meal : allMeals) {
                    if (order.getMealID() == meal.getMealID()) {
                        ArrayList<MealIngredient> mealIngredients = Utilities.IntergratedProjectStaffApplication.JSPConnector.getSpecificMealIngredients(meal);
                        for (MealIngredient mealIngredient : mealIngredients) {
                            if (mealIngredient.getProduceIngredient() == 1) //ingredient is an ingredient
                                Utilities.IntergratedProjectStaffApplication.JSPConnector.updateStock(mealIngredient.getIngredientID(), mealIngredient.getStockUsed());
                            else if (mealIngredient.getProduceIngredient() == 1) { //ingredient is a produce
                                double amountMade = Utilities.IntergratedProjectStaffApplication.JSPConnector.getProduce(mealIngredient.getProduceID()).getAmountMade();
                                double portion = mealIngredient.getStockUsed() / amountMade; //portion of the ingredients to take off
                                ArrayList<MadeIngredient> madeIngredients = Utilities.IntergratedProjectStaffApplication.JSPConnector.getSpecificProduceIngredient(mealIngredient.getProduceID());
                                for (MadeIngredient madeIngredient : madeIngredients) {
                                    Utilities.IntergratedProjectStaffApplication.JSPConnector.updateStock(madeIngredient.getIngredientID(), madeIngredient.getStockUsed()*portion);
                                }
                            }
                        }
                        break;
                    }
                }
            }
            currentBill = null;
            lblTableNo.setText("Table Paid");
            lblTotal.setText("0.00");
            lblTotalToPay.setText("0.00");
            Utilities.IntergratedProjectStaffApplication.numPad.dispose();
        }
    }
    
    public void markCourse(int course) {
        
        for (BillOrder order : currentBill.getBillOrders()) {
            if (order.getCourse() == course) {
                order.setComplete(1);
                markComplete.add(order);
            }
        }
        refreshOrderList();        
    }
    
    public void generateOrderButtons(ArrayList<Meal> meals) {
        
        panel.removeAll();
        buttons.clear();
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        if (meals.isEmpty()) {
            JLabel label = new JLabel();
            label.setText("No Meals in this section");
            label.setForeground(Color.yellow);
            panel.add(label);
        }
        else {
            for (Meal meal : meals) {
                JButton button = new JButton();
                button.setText(meal.getName());
                button.setPreferredSize(new Dimension(110, 40));
                button.setMaximumSize(new Dimension(110, 40));
                button.setBackground(Color.ORANGE);
                button.setVisible(true);

                button.addActionListener((ActionEvent e) -> {
                    if (currentBill == null) {
                        Utilities.Utilities.infoBox("Please select a table", "Table");
                    } else {
                        String mealType = "";
                        switch (course) {
                            case 0:
                                mealType = "Drink - ";
                                break;
                            case 1:
                                mealType = "Starter - ";
                                break;
                            case 2:
                                mealType = "Main - ";
                                break;
                            case 3:
                                mealType = "Dessert - ";
                                break;
                        }
                        
                        
                        BillOrder order = new BillOrder(currentBill.getBillID(), meal.getMealID(), 0, course);
                        newItems.add(order);
                        orderModel.addElement(mealType + meal.getName() + " " + meal.getPrice());
                        currentBill.getBillOrders().add(order);
                        currentBill.setTotal(currentBill.getTotal() + meal.getPrice());
                        setLabels();
                    }
                });

                panel.add(button, c);
                buttons.add(button);
                c.gridx += 1;
                if (c.gridx == 4) {
                    c.gridx = 0;
                    c.gridy += 1;
                }
            }
        }
        panel.revalidate();
        repaint();
        
    }
    
    public void setupPanel() {
        panel = new JPanel();
        panel.setBackground(Color.black);
        panel.setLayout(new GridBagLayout());
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setSize(pnlMeals.getWidth(), pnlMeals.getHeight());
        scrollPane.setVisible(true);
        pnlMeals.setMaximumSize(new Dimension(462, 527));
        pnlMeals.add(scrollPane);
        pnlBackGround.setBackground(Color.black);
    }
    
    public void courseButtonSettings(Boolean onOff) {        
        btnCourse1.setEnabled(onOff);
        btnCourse2.setEnabled(onOff);
        btnCourse3.setEnabled(onOff);        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlcoholic;
    private javax.swing.JButton btnBillSplit;
    private javax.swing.JButton btnCard;
    private javax.swing.JButton btnCash;
    private javax.swing.JButton btnConfirmBill;
    private javax.swing.JToggleButton btnCourse1;
    private javax.swing.JToggleButton btnCourse2;
    private javax.swing.JToggleButton btnCourse3;
    private javax.swing.JButton btnDessert;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnMain;
    private javax.swing.JButton btnManagerOptions;
    private javax.swing.JButton btnNonAlcoholic;
    private javax.swing.JButton btnOpenTables;
    private javax.swing.JButton btnRefund;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnSide;
    private javax.swing.JButton btnSnack;
    private javax.swing.JButton btnStarter;
    private javax.swing.JButton btnViewOrders;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTableNo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalToPay;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JList<String> lstOrder;
    private javax.swing.JPanel pnlBackGround;
    private javax.swing.JPanel pnlMeals;
    // End of variables declaration//GEN-END:variables
}
